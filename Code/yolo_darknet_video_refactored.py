# -*- coding: utf-8 -*-
"""Yolo_Darknet_Video_Refactored.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UI4VyX8P0pVgLylUxcm-U4VPnXL59VVx
"""

#Imports
import cv2
import matplotlib.pyplot as plt
from google.colab import drive
import os
from google.colab import files

def setup_google_drive(forced_remount=False, fresh_install=False):
  print("------------------------------SETTING UP GOOGLE DRIVE------------------------------")
  
  #Force mount Google Drive based on user parameter passed
  #In case of error, restart runtime
  drive.mount('/content/gdrive', force_remount=forced_remount)
  
  #if running for the first time, or the repo is not
  #cloned, or you want to start afresh 
  if fresh_install == True:
    
    !rm -fr /content/gdrive/My\ Drive/darknetProject/darknet
    !git clone https://github.com/AlexeyAB/darknet/ /content/gdrive/My\ Drive/darknetProject/darknet

def setup_cuda(install_dependencies=False):
  print("------------------------------SETTING UP CUDA------------------------------")
  
  if install_dependencies==True:
    #Downloading and Installing CUDA pre-requisites
    !rm -f /content/gdrive/My\ Drive/darknetProject/cuda-repo-ubuntu1604-8-0-local-ga2_8.0.61-1_amd64-deb
    !wget https://developer.nvidia.com/compute/cuda/8.0/Prod2/local_installers/cuda-repo-ubuntu1604-8-0-local-ga2_8.0.61-1_amd64-deb -P /content/gdrive/My\ Drive/darknetProject/
    !dpkg -i /content/gdrive/My\ Drive/darknetProject/cuda-repo-ubuntu1604-8-0-local-ga2_8.0.61-1_amd64-deb

  !apt update

  #Installing CUDA
  !apt install cuda-8-0 -y

  # If there is an issue installing CUDA, 
  # try installing cuda-visual-tools again
  # Comment the earlier command to install cuda
  # Uncomment and run the below command

  #!apt --fix-broken install cuda-visual-tools-8-0 -y

def setup_compilers():
  print("------------------------------SETTING UP COMPILERS------------------------------")
  
  #Installing compilers
  !apt install gcc-5 g++-5 -y

  #Link compilers to cuda
  !ln -s /usr/bin/gcc-5 /usr/local/cuda/bin/gcc 
  !ln -s /usr/bin/g++-5 /usr/local/cuda/bin/g++

def add_to_path():
  print("------------------------------SETTING UP PATH/LIBOPENCV------------------------------")
  
  #Add cuda to PATH
  if not os.environ['PATH'].endswith(':/usr/local/cuda/bin'): 
    os.environ['PATH'] += ':/usr/local/cuda/bin'
    
  # Apparently we need to install this so that OpenCV can work without any issues
  # when we are making the file
  !apt-get install libopencv-dev

def setup_makefile(enable_opencv = True, enable_GPU = True, enable_CUDA = False):
  print("------------------------------SETTING UP MAKEFILE------------------------------")
  
  
  #Changing the variables to include OpenCV and GPU in the Makefile
  if(enable_opencv == True):
    !sed -i 's/OPENCV=0/OPENCV=1/g' /content/gdrive/My\ Drive/darknetProject/darknet/Makefile
  else:
    !sed -i 's/OPENCV=1/OPENCV=0/g' /content/gdrive/My\ Drive/darknetProject/darknet/Makefile
    
  if(enable_GPU == True):
    !sed -i 's/GPU=0/GPU=1/g' /content/gdrive/My\ Drive/darknetProject/darknet/Makefile
  else:
    !sed -i 's/GPU=1/GPU=0/g' /content/gdrive/My\ Drive/darknetProject/darknet/Makefile
  
  if(enable_CUDA == True):
    !sed -i 's/CUDA=0/CUDA=1/g' /content/gdrive/My\ Drive/darknetProject/darknet/Makefile
  else:
    !sed -i 's/CUDA=1/CUDA=0/g' /content/gdrive/My\ Drive/darknetProject/darknet/Makefile
  
  !cat /content/gdrive/My\ Drive/darknetProject/darknet/Makefile

def setup_yolo_weights():
  print("------------------------------SETTING UP NEURAL NETWORK WEIGHTS------------------------------")
  
  import os
  exists = os. path. isfile('/content/gdrive/My\ Drive/darknetProject/darknet/yolov3.weights')
  if not exists:
    !wget https://pjreddie.com/media/files/yolov3.weights -P /content/gdrive/My\ Drive/darknetProject/darknet

def make(enable_opencv = True, enable_GPU = True, enable_CUDA = False):
  
  #Running make!
  print(" - - - - - - - - Makefile - - - - - - - - -")
  setup_makefile(enable_opencv, enable_GPU, enable_CUDA)
  print("------------------------------RUNNING MAKEFILE------------------------------")

  print(" - - - - - - - - Starting Make- - - - - - - - -")  
  !make
  print(" - - - - - - - - Make Complete!- - - - - - - - -")  
  
def setup_environment(forced_remount_drive=False, fresh_install=False, install_CUDA_dependencies=False):
  setup_google_drive(forced_remount_drive, fresh_install)
  setup_cuda(install_CUDA_dependencies)
  setup_compilers()
  add_to_path()
  setup_yolo_weights()

def detect_in_image(path_to_image):
# Here is an example from YOLO
#   !./darknet detect cfg/yolov3.cfg yolov3.weights data/dog.jpg
  !./darknet detect cfg/yolov3.cfg yolov3.weights path_to_image
#   %matplotlib inline

  image = cv2.imread("predictions.jpg")
  height, width = image.shape[:2]
  resized_image = cv2.resize(image,(3*width, 3*height), interpolation = cv2.INTER_CUBIC)

  fig = plt.gcf()
  fig.set_size_inches(18, 10)
  plt.axis("off")
  #plt.rcParams['figure.figsize'] = [10, 5]
  plt.imshow(cv2.cvtColor(resized_image, cv2.COLOR_BGR2RGB))
  plt.show()

def video_predict():
  print("------------------------------PREDICTING ON VIDEO------------------------------")
  
  !./darknet detector demo cfg/coco.data cfg/yolov3.cfg yolov3.weights -dont_show /content/gdrive/My\ Drive/darknetProject/darknet/data/input.mp4 -i 0 -out_filename /content/gdrive/My\ Drive/darknetProject/darknet/data/output.mp4
  print(" - - - - - - -- - - - - - Processing Complete! Start Download ! : - - - - - - -- - - - - - ")

def download_processed_video():
    files.download('/content/gdrive/My Drive/darknetProject/darknet/data/output.mp4')

#MAIN FUNCTION for FIRST RUN
#run this only once during start of analysis
def first_run(forced_remount_drive=False, fresh_install=False, install_CUDA_dependencies=False):
  setup_environment(forced_remount_drive, fresh_install, install_CUDA_dependencies)
#   %cd /content/gdrive/My\ Drive/darknetProject/darknet/

first_run(True, True, True)

#MAIN FUNCTION for OTHER RUNS with MAKE
make(enable_opencv = True, enable_GPU = True, enable_CUDA = False)

# ###########################################################################################
# print("------------------------------UPLOAD VIDEO------------------------------")         #  
# uploaded = files.upload()                                                                 #
# for name, data in uploaded.items():                                                       #
#   with open('/content/gdrive/My Drive/darknetProject/data/input.mp4', 'wb') as f:         #
#     f.write(data)                                                                         #
#     print ('saved file', name)                                                            #
# ###########################################################################################


video_predict()

!./darknet detector demo cfg/coco.data cfg/yolov3.cfg yolov3.weights -dont_show /content/gdrive/My\ Drive/darknetProject/darknet/data/input.mp4 -i 0 -out_filename output.mp4 -ext_output>result.csv

download_processed_video()

!ls cfg

